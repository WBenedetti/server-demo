package hello;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.MenuItem;
import hello.MenuRepository;
import menuproduct.MENUSCHEMA;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private MenuRepository menuRepository;
	
	@RequestMapping(value = "/")
	public String index() {
		return "index";
	}
	
	@PostMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestBody MENUSCHEMA menu) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		//User n = new User();
		//n.setName(name);
		//n.setEmail(email);
	
		MenuItem item = new MenuItem();
		item.setMenuname(menu.getMenuname());
		item.setAvailable(menu.getAvailable());
		item.setComboprice(menu.getComboprice());
		item.setEachprice(menu.getEachprice());
		item.setImage(menu.getImage());
		menuRepository.save(item);
		return "Saved";
	}
	
	@GetMapping(path="/products")
	public @ResponseBody Iterable<MenuItem> getAllUsers() {
		// This returns a JSON or XML with the users
		return menuRepository.findAll();
	}
	
	@PutMapping("/products/{id}")
	Optional<Object> replaceProduct(@RequestBody MENUSCHEMA newProduct, @PathVariable Integer id) {

		return menuRepository.findById(id)
			.map(item -> {
				item.setMenuname(newProduct.getMenuname());
				item.setAvailable(newProduct.getAvailable());
				item.setComboprice(newProduct.getComboprice());
				item.setEachprice(newProduct.getEachprice());
				item.setImage(newProduct.getImage());
				return menuRepository.save(item);
			});
	}
	
	@GetMapping(path="/products/{id}")
	public @ResponseBody Optional<MenuItem> getProduct(@PathVariable int id) {
		return menuRepository.findById(id);
	}
	
	@DeleteMapping("/products/{id}")
	void deleteProduct(@PathVariable int id) {
		menuRepository.deleteById(id);
	}

}
